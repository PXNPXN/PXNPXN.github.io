<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Netty</title>
  
  <subtitle>helloword</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-04-12T14:23:20.540Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>风铃</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android错误</title>
    <link href="http://yoursite.com/2020/04/12/Android%E9%94%99%E8%AF%AF/"/>
    <id>http://yoursite.com/2020/04/12/Android%E9%94%99%E8%AF%AF/</id>
    <published>2020-04-12T13:56:08.000Z</published>
    <updated>2020-04-12T14:23:20.540Z</updated>
    
    <content type="html"><![CDATA[<p>Android Studio报错：Caused by: org.gradle.api.resources.ResourceException: Could not get resource </p><a id="more"></a><p>Android Studio版本号：3.6</p><p>解决办法：把原有build配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">allprojects&#123;</span><br><span class="line">   repositories&#123;</span><br><span class="line">      jcenter()</span><br><span class="line">      google()</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改为：</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">allprojects</span>&#123;</span><br><span class="line">   <span class="variable">repositories</span>&#123;</span><br><span class="line">      <span class="comment">//新加</span></span><br><span class="line">      <span class="function"><span class="title">mavenCentral</span>()</span></span><br><span class="line">      <span class="function"><span class="title">mavenLocal</span>()</span></span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="title">jcenter</span>()</span></span><br><span class="line">      <span class="function"><span class="title">google</span>()</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后更新build文件，rebuild后，该错误消失。</p><p>据了解jcenter()和mavenCentral()是Android Studio中Gradle插件使用的仓库。Android Studio早期版本使用的是MavenCentral，从某个时候开始切换到jcenter了，也就是说，项目之所以报错，是因为该项目的Android Studio是早期的版本。之所以使用jcenter在性能和占存储大小方面比mavenCentral更优：</p><ol><li>jcenter 是世界上最大的java仓库</li><li>jcenter通过CDN服务，使用的是https协议，安全性更高，而Android Studio 0.8版本mavenCentral使用的是http协议</li><li>jcenter是mavenCentral的超集，包括许多额外的仓库</li><li>jcenter性能方面比mavenCentral更优</li><li>mavenCentral会自动下载很多与IDE相关的index，而这些用到的少，且不是必需</li></ol><p>而mavenLocal则是用来指定本地仓库路径的，使用mavenLocal就是默认本地路径。若是自定义本地路径，则：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">repositories&#123;</span><br><span class="line">   maven&#123;url <span class="string">'D://Users/user2/.m2/repository'</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android Studio报错：Caused by: org.gradle.api.resources.ResourceException: Could not get resource &lt;/p&gt;
    
    </summary>
    
    
      <category term="Android Error" scheme="http://yoursite.com/categories/Android-Error/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>HTML元素--1</title>
    <link href="http://yoursite.com/2020/04/06/HTML%E5%85%83%E7%B4%A01/"/>
    <id>http://yoursite.com/2020/04/06/HTML%E5%85%83%E7%B4%A01/</id>
    <published>2020-04-06T03:28:38.000Z</published>
    <updated>2020-04-06T12:44:23.787Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML元素小记–ol-ul-dl-table"><a href="#HTML元素小记–ol-ul-dl-table" class="headerlink" title="HTML元素小记–ol-ul-dl-table"></a>HTML元素小记–ol-ul-dl-table</h1><a id="more"></a><p>可能这些东西对某些大佬老说已经非常熟悉了，但是作为小白的我，依旧需要记录一下，毕竟web前端不是经常用，而且写博客也是催促自己学习的一种方式，若某天大佬看了，请自动忽略本文。只供自己学习用，请勿嘲笑。</p><h2 id="1-无序列表标签–ul"><a href="#1-无序列表标签–ul" class="headerlink" title="1. 无序列表标签–ul"></a>1. 无序列表标签–ul</h2><ul>是无序的列表标签，无序嘛，就是列表中的内容是没有顺序的。无序列表中的每一项是<li><p>所有主流浏览器都支持ul标签。</p><p> 英文单词解释：</p><pre><code>*ul: unordered list, &quot;无序列表&quot;*li: list item, &quot;列表项&quot;</code></pre><p>例如(示例使用了Vue框架，使用时请自行引入Vue框架文件)：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ex1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"text in texts"</span>&gt;</span></span><br><span class="line">                &#123;&#123;text.node&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> ex1=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#ex1'</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line">            text:[</span><br><span class="line"><span class="actionscript">                &#123;node:<span class="string">'苹果'</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                &#123;node:<span class="string">'梨'</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                &#123;node:<span class="string">'草莓'</span>&#125;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>浏览器效果如下：</p><ul><li>苹果</li><li>梨</li><li>草莓</li></ul><hr><p>属性：</p><ul><li>type=”属性值”。属性值可选: disc(实心原点，默认), square(实心方点)，circle(空心圆)</li></ul><hr><p>注意：</p><ul><li>注意li不能单独使用，且ul标签中的”儿子标签”只能是 li .</li><li>ul的作用：是增加无序列表的”语义”的。</li><li>li 是一个容器标签，可以放其他的标签元素，甚至是ul</li><li>这里就不比较HTML和XHTML之间的差异了，如果需要请自行到<a href="https://www.w3school.com.cn/tags/tag_ul.asp" target="_blank" rel="noopener">W3school</a>查看</li></ul><hr><p>ul 标签可以多层复杂嵌套：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">b</span>&gt;</span>水果<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>梨<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">b</span>&gt;</span>鲜花<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>玫瑰花</span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>红玫瑰<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>白玫瑰<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>康乃馨<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>杜鹃花<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>丁香花<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p>应用场景：</p><ul><li>导航栏</li><li>类似于购物清单列表</li></ul><hr><h2 id="2-有序列表-–ol-里面的每一项是–-li"><a href="#2-有序列表-–ol-里面的每一项是–-li" class="headerlink" title="2. 有序列表 –ol,  里面的每一项是– li"></a>2. 有序列表 –ol,  里面的每一项是– li</h2><p>所有主流浏览器都支持ol标签。</p><p>英文单词：</p><p>ol :  Ordered List.</p><p>例如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ex2"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ol</span> <span class="attr">start</span>=<span class="string">"50"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"todo in todos"</span>&gt;</span></span><br><span class="line">                &#123;&#123;todo.text&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#ex2'</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line">            todos:[</span><br><span class="line"><span class="actionscript">                &#123;text:<span class="string">'苹果'</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                &#123;text:<span class="string">'梨'</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                &#123;text:<span class="string">'草莓'</span>&#125;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>演示效果如下：</p><ol start="50"><li>苹果</li><li>梨</li><li>草莓</li></ol><hr><p>属性：</p><ul><li>reversed ：规定列表顺序为降序。(9,8,7…) 默认是顺序。</li><li>start ：规定有序列的起始值。</li><li>type ：规定在列表中使用的标记类型。如：(1, A ,a ,I ,i ).</li></ul><hr><p>ol也可以多层嵌套。</p><h2 id="3-定义列表-–dl"><a href="#3-定义列表-–dl" class="headerlink" title="3. 定义列表 –dl"></a>3. 定义列表 –dl</h2><p>dl英文单词：definition list，没有属性。dl的子元素只能是dt和dd。</p><p>dt : definition title列表的标题，这个标签是必须的。</p><p>dd ：definition description 列表的列表项，如果不需要它，可以不加。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dt</span>&gt;</span>第一天<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dd</span>&gt;</span>跑步<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dd</span>&gt;</span>听歌<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dd</span>&gt;</span>写代码<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dt</span>&gt;</span>第二天<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dd</span>&gt;</span>陪老婆<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dd</span>&gt;</span>画画<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dd</span>&gt;</span>做饭<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可以这样使用dl</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span>购物指南<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>购物流程<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>会员介绍<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>生活旅行/团购<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>常见问题<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>大家电<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>联系客服<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span>配送方式<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>上门自提<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>211限时达<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>配送服务查询<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>配送费收取标准<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>海外配送<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-表格标签–table"><a href="#4-表格标签–table" class="headerlink" title="4. 表格标签–table"></a>4. 表格标签–table</h2><p>一个表格table是由每行tr组成的，每行是由td组成的。即一个表格是由行组成的，每行又是由列组成的。</p><p>例如，3行4列的单元格：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>生命壹号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>23<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>黄冈<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>许嵩<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>29<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>安徽<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>邓紫棋<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>23<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>女<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>香港<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上图表格中是没有边框的。因此需要设置table的属性：</p><p>table的属性：</p><ul><li>border：边框。像素为单位。</li><li>style=“border-collapse:collapse；”      ：单元格的线和表格的边框合并</li><li>width：宽度。px为单位。</li><li>height：高度。px为单位。</li><li>bordercolor：表格的边框颜色。</li><li>align：表格的水平对齐方式。属性值可以填：left right cente。注意：这里不是设置表格里内容的对齐方式，如果想设置内容的对齐方式，要对单元格标签td进行设置)</li><li>cellpadding : 单元格内容到边的距离，像素为单位。默认情况下指最左侧那条边。如果设置属性 dir=”rtl”, 那就指的是内容到最右边那条线的距离。</li><li>cellspacing ：单元格和单元格之间的距离(外边距)，px为单位。默认情况下对的值为0.</li><li>bgcolor=”#99cc66”：表格的背景颜色。</li><li>background=”路径src/…”：背景图片。</li><li>bordercolorlight：表格的上、左边框，以及单元格的右、下边框的颜色。</li><li>bordercolordark：表格的右、下边框，以及单元格的上、左的边框的颜色。这两个属性的目的是为了设置3D的效果。</li><li>dir：公有属性，单元格内容的排列方式。可以取值：ltr：从左到右(默认)，rtl：从右到左。既然说dir是公有属性，如果把这个属性放在任意标签中，那表明这个标签的位置可能会从右开始排列。</li></ul><hr><p>对于<tr>：行</p><p>属性：</p><ul><li><p>dir：公有属性，设置一行单元格内容的排列方式。具体上面讲过。</p></li><li><p>bgcolor：设置一行单元格的背景颜色。</p></li><li><p>height：一行单元格的高度。</p></li><li><p>align=”center”：一行的内容水平居中显示，取值：left、center、right。</p></li><li><p>valign=”center”：一行内容垂直居中，取值：top、middler、bottom。</p><p>注：th：加粗的单元格。相当于td+b 属性同td标签一样。使用时和tr标签并列。</p><hr><p>表格的thead标签、tbody标签、tfoot标签</p><p>当浏览器显示的时候还是按照thead、tbody、tfoot的顺序依次来显示内容。如果不写thead、tbody、tfoot，那么浏览器解析并显示表格内容的时候从按照代码的从上到下的顺序来显示。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HTML元素小记–ol-ul-dl-table&quot;&gt;&lt;a href=&quot;#HTML元素小记–ol-ul-dl-table&quot; class=&quot;headerlink&quot; title=&quot;HTML元素小记–ol-ul-dl-table&quot;&gt;&lt;/a&gt;HTML元素小记–ol-ul-dl-table&lt;/h1&gt;
    
    </summary>
    
    
      <category term="HTML小记" scheme="http://yoursite.com/categories/HTML%E5%B0%8F%E8%AE%B0/"/>
    
    
      <category term="HTML" scheme="http://yoursite.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>kotlin知识点记录</title>
    <link href="http://yoursite.com/2020/04/04/kotlin%E7%9F%A5%E8%AF%86%E7%82%B9%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2020/04/04/kotlin%E7%9F%A5%E8%AF%86%E7%82%B9%E8%AE%B0%E5%BD%95/</id>
    <published>2020-04-04T04:55:23.000Z</published>
    <updated>2020-04-04T12:59:34.119Z</updated>
    
    <content type="html"><![CDATA[<p>kotlin学习记录</p><a id="more"></a><p>kotlin和java的使用方法有所区别。Kotlin下载Android Studio后就可以使用。<a href="https://developer.android.com/kotlin/learn" target="_blank" rel="noopener">kotlin文档</a></p><p>kotlin使用两个不同的关键字（即val和var）来声明变量。</p><ol><li>val 用于值从不更改的变量。不能使用val声明的变量重新赋值。就相当于java中的final。</li><li>var 用于可以更改的变量。</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> temp: <span class="built_in">Int</span>=<span class="number">10</span></span><br></pre></td></tr></table></figure><p>在上面的示例中，count是一个Int类型的变量，为其赋予的初始值为10：</p><p>Kotlin出了Int类型的，还有Byte、Short、Long、Float和Double、String类型的变量。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> name1: String =<span class="string">"kotlin"</span></span><br><span class="line">name1=<span class="string">"helloworld"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name2: String =<span class="string">"kotlin"</span></span><br><span class="line">name2=<span class="string">"helloworld"</span></span><br></pre></td></tr></table></figure><p>如上例，name1为val，因此name1被赋值后仍是”kotlin”。而name2是var，被赋值后可以改变，因此name2的值变更为”helloword”。</p><p>（注：kotlin编译器可根据所赋值的类型来推断类型，kotlin是一种静态类型的语言。String类型的变量也只能调用String类型的函数）</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num: <span class="built_in">Int</span>=<span class="number">1</span></span><br><span class="line">num.inc()     <span class="comment">//num.inc()的结果为2，但是num的值并不会变，且num++这种方式kotlin不支持</span></span><br><span class="line">num+=<span class="number">1</span>    <span class="comment">//这种方式kotlin是支持的，执行完后，num=2</span></span><br></pre></td></tr></table></figure><h2 id="Null安全"><a href="#Null安全" class="headerlink" title="Null安全"></a>Null安全</h2><p>在某些语言中，可以声明引用类型变量而不明确提供初始值。在这些情况下，变量通常包含null值。默认情况下，Kotlin变量不能持有null。下段代码无效：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> name: String =<span class="literal">null</span></span><br></pre></td></tr></table></figure><p>要使变量持有null值，它必须是为null类型。可以在变量类型后面加上？后缀，可以将变量指定为null</p><p>如下所示:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> name: String?=<span class="literal">null</span></span><br></pre></td></tr></table></figure><p>指定String?类型后，可以将name赋值为null或具体的字符串。</p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>在kotlin中，必须在声明对象时初始化对象的属性。这意味着，当获取类的实例时，立即引用它的任何可访问属性。当调用Fragment#onCreateView之前，Fragment中的View对象尚未准备好进行扩充，所以要推迟View的属性初始化。可以使用 lateinit 推迟属性初始化。使用lateinit时，应尽快初始化属性。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginFragment</span> : <span class="type">Fragment</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> usernameEditText: EditText</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> passwordEditText: EditText</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> loginButton: Button</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> statusTextView: TextView</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onViewCreated</span><span class="params">(view: <span class="type">View</span>, savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.onViewCreated(view, savedInstanceState)</span><br><span class="line"></span><br><span class="line">            usernameEditText = view.findViewById(R.id.username_edit_text)</span><br><span class="line">            passwordEditText = view.findViewById(R.id.password_edit_text)</span><br><span class="line">            loginButton = view.findViewById(R.id.login_button)</span><br><span class="line">            statusTextView = view.findViewById(R.id.status_text_view)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="title">implements</span> <span class="title">Parcelable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> String name;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> String type;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="meta">@Nullable</span> String accessId;</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>当变量带有@Nullable注解时，表示它可空，kotlin会将accessId视为String？</p><p>要指明变量绝不能为null，则使用@NonNull注解：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="title">implements</span> <span class="title">Parcelable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="meta">@NonNull</span> String name;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>如果要修剪name以使其值不包含前导或尾随空格，则可以使用Kotlin的 trim函数。通过几种不同的方式安全地修剪String？。其中一种方式是使用非null断言预算符！！，如下示例：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> account = Account(<span class="string">"name"</span>, <span class="string">"type"</span>)</span><br><span class="line">    <span class="keyword">val</span> accountName = account.name!!.trim()</span><br></pre></td></tr></table></figure><p>！！运算符将其左侧的所有内容视为非null，一次，在本例中，将name视为非null String。 如果它左侧表达式的结果为null，则应用会抛出NullPointerException。</p><p>更安全的选择是使用安全调用运算符?.   ，如下所示：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> account = Account(<span class="string">"name"</span>, <span class="string">"type"</span>)</span><br><span class="line">    <span class="keyword">val</span> accountName = account.name?.trim()</span><br></pre></td></tr></table></figure><p>使用安全调用运算符时，如果 <code>name</code> 不为 null，则 <code>name?.trim()</code> 的结果是一个不带前导或尾随空格的名称值。如果 <code>name</code> 为 null，则 <code>name?.trim()</code> 的结果为 <code>null</code>。这意味着，在执行此语句时，您的应用永远不会抛出 <code>NullPointerException</code>。</p><p>虽然安全调用运算符可使您避免潜在的 <code>NullPointerException</code>，但它会将 null 值传递给下一个语句。您可以使用 Elvis 运算符 (<code>?:</code>) 来紧接着处理 null 值的情况，如以下示例所示：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> account = Account(<span class="string">"name"</span>, <span class="string">"type"</span>)</span><br><span class="line">    <span class="keyword">val</span> accountName = account.name?.trim() ?: <span class="string">"Default name"</span></span><br></pre></td></tr></table></figure><p>如果 Elvis 运算符左侧表达式的结果为 null，则会将右侧的值赋予 <code>accountName</code>。此方法对于提供本来为 null 的默认值很有用。</p><p>您还可以使用 Elvis 运算符提前从函数返回结果，如以下示例所示：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">validateAccount</span><span class="params">(account: <span class="type">Account</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> accountName = account?.name?.trim() ?: <span class="string">"Default name"</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// account cannot be null beyond this point</span></span><br><span class="line">        account ?: <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;kotlin学习记录&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android-kotlin" scheme="http://yoursite.com/tags/Android-kotlin/"/>
    
  </entry>
  
  <entry>
    <title>hexo错误解决</title>
    <link href="http://yoursite.com/2020/04/04/hexo%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3/"/>
    <id>http://yoursite.com/2020/04/04/hexo%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3/</id>
    <published>2020-04-04T00:56:24.000Z</published>
    <updated>2020-04-04T01:16:45.962Z</updated>
    
    <content type="html"><![CDATA[<h1 id="今天遇到的hexo错误，记录下以免以后遇到忘记。"><a href="#今天遇到的hexo错误，记录下以免以后遇到忘记。" class="headerlink" title="今天遇到的hexo错误，记录下以免以后遇到忘记。"></a>今天遇到的hexo错误，记录下以免以后遇到忘记。</h1><a id="more"></a><h2 id="1-当执行新建文章命令时："><a href="#1-当执行新建文章命令时：" class="headerlink" title="1. 当执行新建文章命令时："></a>1. 当执行新建文章命令时：</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="string">"text"</span></span><br></pre></td></tr></table></figure><p>默认[layout]为post。布局.md文件都在scaffolds文件夹下，共有post、draft、page三种。</p><p>执行完命令报错：</p><table><thead><tr><th>YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 5, column 1:</th></tr></thead><tbody><tr><td></td></tr></tbody></table><p>该错误的原因：是文章或文章布局中的属性: 后面没有空格。当然要是一些配置文件：后面没有空格的话肯定也会报错误。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags:</span><br><span class="line">categories: </span><br><span class="line">copyright: </span><br><span class="line">--------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>后面发现后加了空格，但是不小心又点击了哪里把格式给弄乱了，虽然：后面都有空格，但是用Typora工具查看是下面少了一行虚线，于是就报了如下错误：</p><table><thead><tr><th>Cannot read property ‘replace’ of undefined</th></tr></thead><tbody><tr><td></td></tr></tbody></table><p>看了很多帖子也没有太好的解决办法，于是我猜想就跟那一行虚线有关，其他layout文件用Typora工具打开后是有虚线的，于是我就复制了page.md, 更名为post.md。于是重新执行hexo new命令，结果就解决问题了</p><p>归根结底还是冒号(:)后面没有加空格的原因。希望以后多多注意！！！</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;今天遇到的hexo错误，记录下以免以后遇到忘记。&quot;&gt;&lt;a href=&quot;#今天遇到的hexo错误，记录下以免以后遇到忘记。&quot; class=&quot;headerlink&quot; title=&quot;今天遇到的hexo错误，记录下以免以后遇到忘记。&quot;&gt;&lt;/a&gt;今天遇到的hexo错误，记录下以免以后遇到忘记。&lt;/h1&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>vue学习</title>
    <link href="http://yoursite.com/2020/04/03/vue%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2020/04/03/vue%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-04-02T16:04:26.000Z</published>
    <updated>2020-04-03T02:35:05.468Z</updated>
    
    <content type="html"><![CDATA[<h1 id="今天你学Vue了吗-1"><a href="#今天你学Vue了吗-1" class="headerlink" title="今天你学Vue了吗?(1)"></a>今天你学Vue了吗?(1)</h1><a id="more"></a><p>  作为程序员中的小小白，对vue敬仰已久。这几天心血来潮，想学习一些基础的vue语法，请大佬们赐教。(vue是MVVM(model-view-viewmodel)模式)</p><h2 id="如何使用vue呢？"><a href="#如何使用vue呢？" class="headerlink" title="如何使用vue呢？"></a>如何使用vue呢？</h2><h3 id="1-可以直接在-html-文件中，引用一下代码使用Vue："><a href="#1-可以直接在-html-文件中，引用一下代码使用Vue：" class="headerlink" title="1. 可以直接在.html 文件中，引用一下代码使用Vue："></a>1. 可以直接在.html 文件中，引用一下代码使用Vue：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 生产环境版本，优化了尺寸和速度 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-还有更多安装Vue的方式。但不推荐新手直接使用-vue-cli，尤其不熟悉基于Node-js-的构建工具。"><a href="#2-还有更多安装Vue的方式。但不推荐新手直接使用-vue-cli，尤其不熟悉基于Node-js-的构建工具。" class="headerlink" title="2.还有更多安装Vue的方式。但不推荐新手直接使用 vue-cli，尤其不熟悉基于Node.js  的构建工具。"></a>2.还有更多安装Vue的方式。但不推荐新手直接使用 vue-cli，尤其不熟悉基于Node.js  的构建工具。</h3><h2 id="Coding-Show："><a href="#Coding-Show：" class="headerlink" title="Coding Show："></a>Coding Show：</h2><p>Vue.js 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进DOM的系统：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">   &#123;&#123;message&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app=<span class="keyword">new</span> Vue(&#123;</span><br><span class="line">   el: <span class="string">'#app'</span></span><br><span class="line">   data: &#123;</span><br><span class="line">     message: <span class="string">'Hello Vue!'</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello Vue!</span><br></pre></td></tr></table></figure><p>vue的数据绑定。数据绑定是将数据和视图相关联，当数据发生变化时，可以自动更新视图。</p><p>以上代码便是数据绑定的例子。是文本插值，是最基本的方式，例子中的将会被相应的数据对象替换。当text的值变化时，文本的内容也会联动地发生变化。有时候只需要渲染一次数据，后续数据变化不再关心，可以通过“*”实现，代码：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span></span></span><br><span class="line"><span class="tag">   &#123;&#123;*<span class="attr">message</span>&#125;&#125;</span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>双大括号标签会把里面的值全部当作字符串来处理。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;今天你学Vue了吗-1&quot;&gt;&lt;a href=&quot;#今天你学Vue了吗-1&quot; class=&quot;headerlink&quot; title=&quot;今天你学Vue了吗?(1)&quot;&gt;&lt;/a&gt;今天你学Vue了吗?(1)&lt;/h1&gt;
    
    </summary>
    
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
</feed>
